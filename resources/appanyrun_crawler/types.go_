package appanyrun_crawler

type Task struct {
	Msg        string `json:"msg"`
	Collection string `json:"collection"`
	ID         string `json:"id"`
	Fields     struct {
		Significant bool `json:"significant"`
		Status      int  `json:"status"`
		Remaining   int  `json:"remaining"`
		Times       struct {
			Resync       interface{} `json:"resync"`
			AddedTimeout int         `json:"addedTimeout"`
			Timeout      int         `json:"timeout"`
			TryExec      struct {
				Date int64 `json:"$date"`
			} `json:"tryExec"`
			StopExec struct {
				Date int64 `json:"$date"`
			} `json:"stopExec"`
			StartExec struct {
				Date int64 `json:"$date"`
			} `json:"startExec"`
			TaskStart struct {
				Date int64 `json:"$date"`
			} `json:"taskStart"`
		} `json:"times"`
		Public struct {
			Objects struct {
				MainObject struct {
					Entropy float64 `json:"entropy"`
					V       int     `json:"__v"`
					Task    struct {
						Type  string `json:"$type"`
						Value string `json:"$value"`
					} `json:"task"`
					Info struct {
						Meta struct {
							File string `json:"file"`
							Mime string `json:"mime"`
							Exif struct {
								EXE map[string]interface{} `json:"EXE"`
							} `json:"exif"`
							Ole interface{} `json:"ole"`
						} `json:"meta"`
						Idents []struct {
							Procent   float64 `json:"procent"`
							Extension string  `json:"extension"`
							Filetype  string  `json:"filetype"`
						} `json:"idents"`
					} `json:"info"`
					ID struct {
						Type  string `json:"$type"`
						Value string `json:"$value"`
					} `json:"_id"`
					HideSource   bool          `json:"hide_source"`
					Discovered   bool          `json:"discovered"`
					NeedDiscover bool          `json:"need_discover"`
					Threat       []interface{} `json:"threat"`
					Hashes       struct {
						Ssdeep   string `json:"ssdeep"`
						HeadHash string `json:"head_hash"`
						Sha256   string `json:"sha256"`
						Sha1     string `json:"sha1"`
						Md5      string `json:"md5"`
					} `json:"hashes"`
					Times struct {
						Discovered struct {
							Date int64 `json:"$date"`
						} `json:"discovered"`
						Added struct {
							Date int64 `json:"$date"`
						} `json:"added"`
					} `json:"times"`
					Content struct {
						Size    int  `json:"size"`
						EOF     bool `json:"eof"`
						Present bool `json:"present"`
						ID      struct {
							Type  string `json:"$type"`
							Value string `json:"$value"`
						} `json:"id"`
						Preview struct {
							Antiviruses bool `json:"antiviruses"`
							Whois       bool `json:"whois"`
							Hex         bool `json:"hex"`
							HTML        bool `json:"html"`
							Vba         bool `json:"vba"`
							Js          bool `json:"js"`
							JSON        bool `json:"json"`
							Text        bool `json:"text"`
							Image       bool `json:"image"`
						} `json:"preview"`
						Ext string `json:"ext"`
					} `json:"content"`
					Reason struct {
						Message string `json:"message"`
					} `json:"reason"`
					Names struct {
						Basename   string `json:"basename"`
						Real       string `json:"real"`
						URL        string `json:"url"`
						Location   string `json:"location"`
						NeedRename bool   `json:"need_rename"`
					} `json:"names"`
					Subtype string `json:"subtype"`
					Type    string `json:"type"`
					UUID    string `json:"uuid"`
					Version int    `json:"version"`
				} `json:"mainObject"`
				RunType string `json:"runType"`
			} `json:"objects"`
			Options struct {
				Presentation bool   `json:"presentation"`
				Private      string `json:"private"`
			} `json:"options"`
			Environment struct {
				OS struct {
					Sp          string `json:"sp"`
					ProductType string `json:"product_type"`
					Full        string `json:"full"`
					Build       int    `json:"build"`
					Type        string `json:"type"`
					ElPrompt    bool   `json:"elPrompt"`
					Major       string `json:"major"`
					Bitness     string `json:"bitness"`
					Variant     string `json:"variant"`
					Product     string `json:"product"`
				} `json:"OS"`
			} `json:"environment"`
		} `json:"public"`
		UsersTags []interface{} `json:"usersTags"`
		Tags      []string      `json:"tags"`
		Scores    struct {
			Specs struct {
				Tor               bool `json:"tor"`
				Spam              bool `json:"spam"`
				LowAccess         bool `json:"low_access"`
				Autostart         bool `json:"autostart"`
				MemOverrun        bool `json:"mem_overrun"`
				CPUOverrun        bool `json:"cpu_overrun"`
				StaticDetections  bool `json:"static_detections"`
				SuspStruct        bool `json:"susp_struct"`
				Exploitable       bool `json:"exploitable"`
				Stealing          bool `json:"stealing"`
				ServiceLuncher    bool `json:"service_luncher"`
				NetworkLoader     bool `json:"network_loader"`
				NetworkThreats    bool `json:"network_threats"`
				Injects           bool `json:"injects"`
				DebugOutput       bool `json:"debug_output"`
				ExecutableDropped bool `json:"executable_dropped"`
				Multiprocessing   bool `json:"multiprocessing"`
				CrashedApps       bool `json:"crashed_apps"`
				CrashedTask       bool `json:"crashed_task"`
				UacRequest        bool `json:"uac_request"`
				NotStarted        bool `json:"not_started"`
				Reboot            bool `json:"reboot"`
			} `json:"specs"`
			Verdict struct {
				ThreatLevel int    `json:"threat_level"`
				Text        string `json:"text"`
			} `json:"verdict"`
		} `json:"scores"`
		UUID string `json:"uuid"`
	} `json:"fields"`
}

// result for publicTasksCounter message
type Result struct {
	Msg    string `json:"msg"`
	ID     string `json:"id"`
	Result struct {
		Count int `json:"count"`
	} `json:"result"`
}

// RawProcess
type RawProcess struct {
	Msg        string `json:"msg"`
	Collection string `json:"collection"`
	ID         string `json:"id"`
	Fields     struct {
		Ms   int `json:"ms"`
		Tl   int `json:"tl"`
		Rb   int `json:"rb"`
		Pid  int `json:"pid"`
		Task struct {
			Type  string `json:"$type"`
			Value string `json:"$value"`
		} `json:"task"`
		ParentPID  int         `json:"parentPID"`
		ParentTID  int         `json:"parentTID"`
		RealPPID   int         `json:"_realPPID"`
		RealPSTART int64       `json:"_realPSTART"`
		RealSTART  int64       `json:"_realSTART"`
		Cmd        string      `json:"cmd"`
		Resolved   interface{} `json:"resolved"`
		Exit       struct {
			Code int `json:"code"`
			How  int `json:"how"`
		} `json:"exit"`
		HeadHash string `json:"head_hash"`
		Times    struct {
			Created struct {
				Date int64 `json:"$date"`
			} `json:"created"`
			Closed struct {
				Date int64 `json:"$date"`
			} `json:"closed"`
		} `json:"times"`
		User struct {
			Name string `json:"name"`
			Sid  string `json:"sid"`
			Il   string `json:"il"`
		} `json:"user"`
		Version struct {
			Description interface{} `json:"description"`
			Company     interface{} `json:"company"`
			Version     interface{} `json:"version"`
		} `json:"version"`
		EventsCounters struct {
			Raw struct {
				Registry int `json:"registry"`
				Files    int `json:"files"`
				Modules  int `json:"modules"`
			} `json:"raw"`
			DroppedFiles int `json:"dropped_files"`
			DebugStrings int `json:"debug_strings"`
			Network      int `json:"network"`
		} `json:"events_counters"`
		Image     string `json:"image"`
		ImageUp   string `json:"imageUp"`
		Important bool   `json:"important"`
		Scores    struct {
			Specs struct {
				Network           bool `json:"network"`
				UacRequest        bool `json:"uac_request"`
				KnownThreat       bool `json:"known_threat"`
				Injects           bool `json:"injects"`
				NetworkLoader     bool `json:"network_loader"`
				ServiceLuncher    bool `json:"service_luncher"`
				ExecutableDropped bool `json:"executable_dropped"`
				Multiprocessing   bool `json:"multiprocessing"`
				CrashedApps       bool `json:"crashed_apps"`
				DebugOutput       bool `json:"debug_output"`
				Stealing          bool `json:"stealing"`
				Exploitable       bool `json:"exploitable"`
				StaticDetections  bool `json:"static_detections"`
				SuspStruct        bool `json:"susp_struct"`
				Autostart         bool `json:"autostart"`
				LowAccess         bool `json:"low_access"`
			} `json:"specs"`
			Type            string `json:"type"`
			Important       bool   `json:"important"`
			ImportantReason string `json:"important_reason"`
			ImportantSince  struct {
				Date int64 `json:"$date"`
			} `json:"important_since"`
			Injected     interface{}   `json:"injected"`
			Serviced     interface{}   `json:"serviced"`
			IsMainObject bool          `json:"isMainObject"`
			IsDropped    bool          `json:"isDropped"`
			IsSigned     bool          `json:"isSigned"`
			IsInjected   bool          `json:"isInjected"`
			IsLoadSusp   bool          `json:"isLoadSusp"`
			WasBefore    bool          `json:"wasBefore"`
			FileType     string        `json:"fileType"`
			Signs        []interface{} `json:"signs"`
		} `json:"scores"`
		Status  int `json:"status"`
		Content struct {
			UUID string `json:"uuid"`
			ID   struct {
				Type  string `json:"$type"`
				Value string `json:"$value"`
			} `json:"id"`
		} `json:"content"`
	} `json:"fields"`
}

// Mitre ATT&CK Mapping
type RawIncident struct {
	Msg        string `json:"msg"`
	Collection string `json:"collection"`
	ID         string `json:"id"`
	Fields     struct {
		Task struct {
			Type  string `json:"$type"`
			Value string `json:"$value"`
		} `json:"task"`
		ProcessOID struct {
			Type  string `json:"$type"`
			Value string `json:"$value"`
		} `json:"processOID"`
		Threatlevel int    `json:"threatlevel"`
		Title       string `json:"title"`
		FirstSeen   struct {
			Date int64 `json:"$date"`
		} `json:"firstSeen"`
		Mitre []string `json:"mitre"`
	} `json:"fields"`
}

// simplified structs
type Process struct {
	OID         string // mapping to RawIncident
	ProcessID   int
	ParentPID   int
	CommandLine string
	Image       string
	ProcessType string
}

func NewProcess(rawProc *RawProcess) *Process {
	return &Process{
		OID:         rawProc.ID,
		ProcessID:   rawProc.Fields.Pid,
		ParentPID:   rawProc.Fields.ParentPID,
		CommandLine: rawProc.Fields.Cmd,
		Image:       rawProc.Fields.Image,
		ProcessType: rawProc.Fields.Scores.ImportantReason,
	}
}

type Incident struct {
	ProcessOID   string
	ThreatLevel  int
	MitreAttacks []string
}

func NewIncident(rawIncident *RawIncident) *Incident {
	return &Incident{
		ProcessOID:   rawIncident.Fields.ProcessOID.Value,
		ThreatLevel:  rawIncident.Fields.Threatlevel,
		MitreAttacks: rawIncident.Fields.Mitre,
	}
}

type ProcessTreeModel struct {
	Processes []*Process
	Incidents []*Incident
}
